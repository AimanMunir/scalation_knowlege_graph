[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/MinSpanningTree.scala:105:27: value printInOrder is not a member of scala.collection.mutable.PriorityQueue[MinSpanningTree.this.Elem][0m
[0m[[0m[31merror[0m] [0m[0m            if (DEBUG) qu.printInOrder[0m
[0m[[0m[31merror[0m] [0m[0m                          ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/MinSpanningTree.scala:111:23: value increaseKey is not a member of scala.collection.mutable.PriorityQueue[MinSpanningTree.this.Elem][0m
[0m[[0m[31merror[0m] [0m[0m                   qu.increaseKey (Elem (ni, key(ni)), Elem (ni, cost))  // reposition ni toward front in priority queue[0m
[0m[[0m[31merror[0m] [0m[0m                      ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/Partition.scala:147:38: overloaded method value ++ with alternatives:[0m
[0m[[0m[31merror[0m] [0m[0m  [B >: Int](xs: Array[_ <: B])(implicit evidence$25: scala.reflect.ClassTag[B])Array[B] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [B >: Int](xs: scala.collection.IterableOnce[B])(implicit evidence$24: scala.reflect.ClassTag[B])Array[B][0m
[0m[[0m[31merror[0m] [0m[0m cannot be applied to (Int)[0m
[0m[[0m[31merror[0m] [0m[0m        val lab    = child ++ parent ++ ilabel(i) [0m
[0m[[0m[31merror[0m] [0m[0m                                     ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/Partition.scala:162:18: not found: value popmax[0m
[0m[[0m[31merror[0m] [0m[0m        val mx = popmax                                  // maximum frequency count[0m
[0m[[0m[31merror[0m] [0m[0m                 ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/SSShortestPath.scala:63:32: too many arguments (2) for method apply: (i: Int)Array[Double] in class Array[0m
[0m[[0m[31merror[0m] [0m[0m        for (j <- rang if c(s, j) == 0) d(j) = MAX      // set distance to infinity if no direct edge from s[0m
[0m[[0m[31merror[0m] [0m[0m                               ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/SSShortestPath.scala:77:43: too many arguments (2) for method apply: (i: Int)Array[Double] in class Array[0m
[0m[[0m[31merror[0m] [0m[0m                for (j <- rang if c(v.id, j) > 0.0) {   // check vertex v's neighbors[0m
[0m[[0m[31merror[0m] [0m[0m                                          ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/SSShortestPath.scala:78:36: overloaded method value + with alternatives:[0m
[0m[[0m[31merror[0m] [0m[0m  (x: Double)Double <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (x: Float)Double <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (x: Long)Double <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (x: Int)Double <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (x: Char)Double <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (x: Short)Double <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (x: Byte)Double <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (x: String)String[0m
[0m[[0m[31merror[0m] [0m[0m cannot be applied to (Array[Double])[0m
[0m[[0m[31merror[0m] [0m[0m                    val alt = v.dd + c(v.id, j)         // compute alternate distance from s to j[0m
[0m[[0m[31merror[0m] [0m[0m                                   ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/SSShortestPath.scala:123:33: too many arguments (3) for method update: (i: Int, x: Array[Double])Unit[0m
[0m[[0m[31merror[0m] [0m[0m            c(i, j) =  v_weight + e_weight                      // overall weight for edge i -> j[0m
[0m[[0m[31merror[0m] [0m[0m                                ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/graph_algebra/MuGraphGen.scala:84:26: not found: value RandomVecI[0m
[0m[[0m[31merror[0m] [0m[0m            val rvec   = RandomVecI (degree, size-1, i)                // random vector of integers[0m
[0m[[0m[31merror[0m] [0m[0m                         ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/graph_algebra/RandomGraph.scala:63:38: not found: value RandomVecS[0m
[0m[[0m[31merror[0m] [0m[0m    def genVLabels: Array [String] = RandomVecS (nLabels, true, stream).sgen[0m
[0m[[0m[31merror[0m] [0m[0m                                     ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/aimanmunir/Downloads/scalation_knowlege_graph/scalation_database/src/main/scala/scalation/graph_db/graph_algebra/RandomGraph.scala:119:24: not found: value RandomVecS[0m
[0m[[0m[31merror[0m] [0m[0m        val var_labs = RandomVecS (nVertices, true, stream).sgen[0m
[0m[[0m[31merror[0m] [0m[0m                       ^[0m
[0m[[0m[31merror[0m] [0m[0m11 errors found[0m
